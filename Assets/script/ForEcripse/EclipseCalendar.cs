using UnityEngine;
using System.Collections;

public class EclipseCalendar
 {
  public const int START_YEAR = 0;
  public const int START_MONTH = 1;
  public const int START_DAY = 2;

  public static readonly int[][] schedule = new int[][]
   {
/*
    new int[] { 2016, 9, 1, 5, 30, 2016, 9, 1,12,  0},// 金環 中部大西洋に始まりアフリカ大陸、マダガスカル島を横断、南インド洋に達する。 
    new int[] { 2017, 2,26,11, 30, 2017, 2,26,17, 30},//金環 南東太平洋に生起、南アメリカ南部からアフリカ南部に達する  
    new int[] { 2017, 8,21,15, 30, 2017, 8,21,21, 30},//皆既 北太平洋中部に始まり北米大陸を横断、中部大西洋で終わる 
*/
    new int[] { 2018,  7, 13,  1, 25, 2018,  7, 13,  3, 55 }, //(調整済)（部分）オーストラリアと南極間の海上で見られる(部分)
    new int[] { 2018,  8, 11,  8,  0, 2018,  8, 11, 11, 40 },//（調整済）（部分）
    new int[] { 2019,  1,  5, 23,  0, 2019,  1,  6,  3, 25 },//(調整済)(部分）日本付近に始まり、
    new int[] { 2019,  7,  2, 16, 50, 2019,  7,  2, 22,  0 }, //(調整済)（皆既）
    new int[] { 2019, 12, 26,  2, 25, 2019, 12, 26,  8, 15 },//(調整済)（金環）インドに始まり、アジア全域を月影が横切る日食。ラオスなどで皆既（？）日食 ;
  
    new int[] { 2020,  6, 21,  3, 30, 2020,  6, 21,  9, 30 },//(調整済)(金環)
    new int[] { 2020, 12, 14, 13, 50, 2020, 12, 14, 19, 25 },//(調整済)(皆既)
    new int[] { 2021,  6, 10,  9,  0, 2021,  6, 10, 14,  5 },//(調整済)金環 北アメリカ、北極、シベリア東部を通る。
    new int[] { 2021, 12,  4,  5, 25, 2021, 12,  4,  9, 50 },//(調整済)(皆既)
    new int[] { 2022,  4, 30, 18,  0, 2022,  4, 30, 22,  0 },//(調整済)(部分)
//10
    new int[] { 2022, 10, 25,  8, 50, 2022, 10, 25, 13, 10 },//(調整済)(部分)
    new int[] { 2023,  4, 20,  1, 55, 2023,  4, 20,  7, 30 },//(調整済)(金環・皆既)
    new int[] { 2023, 10, 14, 15,  0, 2023, 10, 14, 21, 10 },//(調整済)(金環)
    new int[] { 2024,  4,  8, 15, 45, 2024,  4,  8, 21, 10 },//(調整済)(皆既)
    new int[] { 2024, 10,  2,  16, 0, 2024, 10,  2, 22, 25 },//(調整済)(金環）

    new int[] { 2025,  3, 29,  8, 40, 2025,  3, 29, 13,  0 },//(調整済)(部分）
    new int[] { 2025,  9, 21, 16, 25, 2025,  9, 21, 21, 20 },//(調整済)(部分）
    new int[] { 2026,  2, 17, 10,  0, 2026,  2, 17, 14, 40 },//(調整済)(金環）
    new int[] { 2026,  8, 12, 16,  5, 2026,  8, 12, 20, 50 },//(調整済)(皆既）
    new int[] { 2027,  2,  6, 13,  5, 2027,  2,  6, 19, 20 },//(調整済)(金環）
//20
    new int[] { 2027,  8,  2,  7, 15, 2027,  8,  2, 12, 35 },//(調整済)(皆既）
    new int[] { 2028,  1, 26, 12,  5, 2028,  1, 26, 18, 20 },//(調整済)(金環）
    new int[] { 2028,  7, 22,  0, 15, 2028,  7, 22,  5, 30 },//(調整済)(皆既）
    new int[] { 2029,  1, 14, 14, 20, 2029,  1, 14, 19, 15 },//(調整済)(部分）
    new int[] { 2029,  6, 12,  2, 40, 2029,  6, 12,  6, 20 },//(調整済)(部分）

    new int[] { 2029,  7, 11, 14,  5, 2029,  7, 11, 16, 50 },//(調整済)(確定)(部分）
    new int[] { 2029, 12,  5, 13, 35, 2029, 12,  5, 17, 55 },//(調整済)(部分）
    new int[] { 2030,  6,  1,  3, 30, 2030,  6,  1,  9, 40 },//(調整済)金環 北アフリカに発し、地中海、ユーラシア中央部、日本の北海道で中心食の他 
    new int[] { 2030, 11, 25,  3, 40, 2030, 11, 25,  9,  5 },//(調整済)(皆既）
/*
    new int[] { 2031,  5, 21,  4,  0, 2031,  5, 21, 10,  5 },//(調整済)(金環)
//30
    new int[] { 2031, 11, 14, 18, 20, 2031, 11, 15,  0,  0 },//(調整済)(金環・皆既）
/*
    new int[] { 2032,  5,  9, 10, 50, 2032,  5,  9, 15, 30 },//(調整済)(金環）
    new int[] { 2032, 11,  3,  3, 15, 2032, 11,  3,  7, 40 },//(調整済)(部分）
    new int[] { 2033,  3, 30, 16, 20, 2033,  3, 30, 20, 50 },//(調整済)(皆既）
    new int[] { 2033,  9, 23, 11, 20, 2033,  9, 23, 15, 50 },//(調整済)(部分）

    new int[] { 2034,  3, 20,  6, 50, 2034,  3, 20, 12, 25 },//(調整済)(皆既）
    new int[] { 2034,  9, 12, 13, 15, 2034,  9, 12, 19,  0 },//(調整済)(金環）
    new int[] { 2035,  3,  9, 20, 30, 2035,  3, 10,  2, 20 },//(調整済)(金環）
    new int[] { 2035,  9,  1, 23, 20, 2035,  9,  2,  4, 50 },//(調整済)皆既 中国奥地から日本を横断、太平洋東部で終わる 
    new int[] { 2036,  2, 27,  2, 45, 2036,  2, 27,  6, 55 },//(調整済)(部分）
//40
    new int[] { 2036,  7, 23,  9, 30, 2036,  7, 23, 11, 50 },//(調整済)(部分）
    new int[] { 2036,  8, 21, 15, 45, 2036,  8, 21 ,19, 40 },//(調整済)(部分）
    new int[] { 2037,  1, 16,  7, 20, 2037,  1, 16, 11, 40 },//(調整済)(部分）
    new int[] { 2037,  7, 12, 23, 30, 2037,  7, 13,  4, 20 },//(調整済)(皆既）
    new int[] { 2038,  1,  5, 10, 50, 2038,  1,  5, 16, 40 },//(調整済)(金環）

    new int[] { 2038,  7,  2, 11, 10, 2038,  7,  2, 17, 10 },//(調整済)(金環）
    new int[] { 2038, 12, 25, 22, 30, 2038, 12, 26,  4,  0 },//(調整済)(皆既)
    new int[] { 2039,  6, 21, 14, 20, 2039,  6, 21, 19, 50 },//(調整済)(金環)
    new int[] { 2039, 12, 15, 14, 10, 2039, 12, 15, 18, 30 },//(調整済)(皆既)
    new int[] { 2040,  5, 11,  1, 35, 2040,  5, 11, 5,  30 },//(調整済)(部分)
//50
    new int[] { 2040, 11,  4, 16, 30, 2040, 11,  4, 20, 40 },//(調整済)(部分)
    new int[] { 2041,  4, 30,  9, 10, 2041,  4, 30, 14, 40 },//(調整済)(皆既)
    new int[] { 2041, 10, 24, 23, 25, 2041, 10, 25,  5, 40 },//(調整済)(金環)
*/
   };

  public static string getDateString(int year, int month, int day)
   {
    string filename = year.ToString();
    if ((month / 10) < 1) filename += "0";
    filename += (month.ToString());
    if ((day / 10) < 1) filename += "0";
    filename += (day.ToString());

    return filename;
   }
 //public static readonly string[] cation;
 //public static readonly int[] startpoint;
 }
